{"version":3,"sources":["index.js"],"names":["winCombo","GameStatus","_ref","player","gameFinished","draw","React","createElement","className","Square","_ref2","clickedArray","handleClick","map","item","index","key","onClick","Game","_useState","useState","Array","fill","_useState2","_slicedToArray","squareArr","setSquareArr","_useState3","_useState4","setPlayer","_useState5","_useState6","setGameFinished","_useState7","_useState8","setDraw","i","length","_winCombo$i","a","b","c","includes","isGameOver","id","App","createRoot","document","getElementById","render"],"mappings":"wLAMMA,SAAW,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAILC,EAAa,SAAHC,GAAsC,IAAjCC,EAAMD,EAANC,OAAQC,EAAYF,EAAZE,aAAcC,EAAIH,EAAJG,KACvC,OACIC,IAAAC,cAAA,OAAKC,UAAU,iBACXF,IAAAC,cAAA,YAAOH,EAAgBC,EAAO,kCAAW,+EAAsBF,EAAe,IAAN,KACjE,6DAAkBA,EAAS,IAAM,QAM9CM,EAAS,SAAHC,GAAsC,IAAhCC,EAAYD,EAAZC,aAAcC,EAAWF,EAAXE,YAC5B,OACAN,IAAAC,cAAA,OAAKC,UAAU,SACVG,EAAaE,IAAI,SAACC,EAAMC,GACrB,OAAa,OAATD,EAEAR,IAAAC,cAAA,OAAKS,IAAKD,EAAOP,UAAU,SAASS,QAAS,kBAAML,EAAYG,KAASD,GAGxER,IAAAC,cAAA,OAAKS,IAAKD,EAAOP,UAAU,kBAAkBM,OAOvDI,EAAO,WACT,IAAAC,EACkCC,mBAASC,MAAM,GAAGC,KAAK,OAAMC,EAAAC,YAAAL,EAAA,GAAxDM,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,EAC4BP,oBAAS,GAAMQ,EAAAJ,YAAAG,EAAA,GAApCxB,EAAMyB,EAAA,GAAEC,EAASD,EAAA,GACxBE,EACwCV,oBAAS,GAAMW,EAAAP,YAAAM,EAAA,GAAhD1B,EAAY2B,EAAA,GAAEC,EAAeD,EAAA,GACpCE,EACwBb,oBAAS,GAAMc,EAAAV,YAAAS,EAAA,GAAhC5B,EAAI6B,EAAA,GAAEC,EAAOD,EAAA,GAqCpB,OAtBmB,WACf,IAAK9B,EAAc,CAEf,IAAK,IAAIgC,EAAI,EAAGA,EAAIpC,EAASqC,OAAQD,IAAK,KAAAE,EAAAd,YACpBxB,EAASoC,GAAE,GAAtBG,EAACD,EAAA,GAAEE,EAACF,EAAA,GAAEG,EAACH,EAAA,GACd,GAAIb,EAAUc,IAAMd,EAAUc,KAAOd,EAAUe,IAAMf,EAAUc,KAAOd,EAAUgB,GAE5E,OADAT,GAAgB,GACTP,EAAUc,GAIzB,IAAKd,EAAUiB,SAAS,MAGpB,OAFAP,GAAQ,GACRH,GAAgB,GACT,MAMnBW,GAGArC,IAAAC,cAAA,OAAKC,UAAU,QACXF,IAAAC,cAACE,EAAM,CAACE,aAAcc,EAAWb,YAlCjB,SAACgC,GACjBlB,EACID,EAAUZ,IAAI,SAACC,EAAMC,GACjB,OAAOA,IAAU6B,EAAMzC,EAAS,IAAM,IAAOW,KAGrDe,GAAW1B,MA6BXG,IAAAC,cAACN,EAAU,CAACE,OAAQA,EAAQC,aAAcA,EAAcC,KAAMA,MAMhEwC,EAAM,WACR,OACAvC,IAAAC,cAAA,OAAKC,UAAU,OACXF,IAAAC,cAACW,EAAI,QAKA4B,qBAAWC,SAASC,eAAe,SAC3CC,OAAO3C,IAAAC,cAACsC,EAAG","file":"static/js/main.653ed844.chunk.js","sourcesContent":["import React from \"react\";\nimport { createRoot } from 'react-dom/client';\nimport \"./App.css\";\nimport { useState } from \"react\";\n\n// Массив комбинаций\nconst winCombo = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n];\n\n// Статус игры\nconst GameStatus = ({player, gameFinished, draw }) => {\n    return (\n        <div className=\"status-screen\">\n            <span>{gameFinished ? (draw ? 'Ничья!' : 'Победил игрок: ' + (!player ? 'X' : 'O')) \n                : ('Ход игрока: ' + (player ? 'X' : 'O'))}\n            </span>\n        </div>);\n  };\n\n// Одна ячейка\nconst Square = ({ clickedArray, handleClick }) => {\n    return (\n    <div className=\"board\">\n        {clickedArray.map((item, index) => {\n            if (item === null) {\n                return (\n                <div key={index} className=\"square\" onClick={() => handleClick(index)}>{item}</div>);\n            } else {\n                return (\n                <div key={index} className=\"square clicked\">{item}</div>);\n            }\n            })}\n    </div>);\n};\n\n// Поле игры\nconst Game = () => {\n    // Массив ячеек игрового поля\n    const [squareArr, setSquareArr] = useState(Array(9).fill(null));\n    // Какой игрок ходит: O == false, X == true\n    const [player, setPlayer] = useState(false);\n    // Статус завершённости игры\n    const [gameFinished, setGameFinished] = useState(false);\n    // Была ли ничья\n    const [draw, setDraw] = useState(false);\n    \n    // При нажатии проверяем по циклу, находим id === index'у ячейки и возврщаем X или Y\n    // В ином случае неизменённую ячейку item\n    // Меняем игрока на другого\n    const handleClick = (id) => {\n        setSquareArr(\n            squareArr.map((item, index) => {\n                return index === id ? (player ? 'X' : 'O') : item;\n            })\n        );\n        setPlayer(!player);\n    };\n\n\n    const isGameOver = () => {\n        if (!gameFinished) {\n            // Перебор победных комбинаций\n            for (let i = 0; i < winCombo.length; i++) {\n                const [a, b, c] = winCombo[i];\n                if (squareArr[a] && squareArr[a] === squareArr[b] && squareArr[a] === squareArr[c]){\n                    setGameFinished(true);\n                    return squareArr[a];\n                }\n            }\n            // Проверка на ничью\n            if (!squareArr.includes(null)) {\n                setDraw(true);\n                setGameFinished(true);\n                return null;\n            }\n        }\n        return null;\n    };\n\n    isGameOver();\n\n    return (\n    <div className=\"game\">\n        <Square clickedArray={squareArr} handleClick={handleClick} />\n        <GameStatus player={player} gameFinished={gameFinished} draw={draw}/>\n    </div>\n    );\n};\n\n// Всё приложение\nconst App = () => {\n    return (\n    <div className=\"App\">\n        <Game />\n        </div>\n        );\n    };\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(<App />);"],"sourceRoot":""}